{"./":{"url":"./","title":"简介","keywords":"","body":"简介 平台 API 能力 扫码支付（主扫） 付款码支付（被扫） JSAPI 支付 收银台模式 H5支付 退款 异步通知 订单查询 关闭订单 撤销订单 获取 openid 获取用户基础信息 获取银行信息 获取商户信息 投诉查询 名词说明 微信支付：指腾讯旗下产品微信中的微信支付功能，同时可代表财付通支付科技有限公司 支付宝：指阿里巴巴旗下的蚂蚁金服，同时可表示支付宝账户 "},"api-lie-biao.html":{"url":"api-lie-biao.html","title":"API列表","keywords":"","body":"API 列表 特别提醒： 异步通知环节，为确保推送成功，可能会出现重复推送，请用户端注意判断重复通知，避免影响自身业务逻辑 所有请求返回环节，有可能根据业务需求新增一些补充字段，所以在验签的时候，请勿固化参数 接口通信中有字段是中文的，请使用 utf-8 编码 推荐所有 HTTP 交互使用 POST 方式进行 返回值为 JSON 字符串 应用市场 本站为PAYJS的合作伙伴，所有API兼容PAYJS应用市场里面的开发包 "},"api-lie-biao/sao-ma-zhi-fu-ff08-zhu-sao-ff09.html":{"url":"api-lie-biao/sao-ma-zhi-fu-ff08-zhu-sao-ff09.html","title":"扫码支付（主扫）","keywords":"","body":"Native扫码支付（主扫）API 扫码请求步骤： 构建请求参数 POST 参数到请求地址 根据返回内容展示二维码 用户支付成功后接收异步通知 请求地址： $(document).ready(function() { var abc = document.domain; abc = abc.replace('www.', ''); abc = abc.replace('help.', ''); document.getElementById(\"domain\").innerHTML = 'https://' + abc }); /api/native 请求参数： 字段名称 字段类型 必填参数 说明 mchid string(16) Y 商户号 total_fee int(16) Y 金额。单位：分 out_trade_no string(32) Y 用户端自主生成的订单号 type string(16) N 留空表示微信支付。支付宝交易传值：alipay body string(32) N 订单标题 attach string(127) N 用户自定义数据，在notify的时候会原样返回 notify_url string(255) N 接收微信支付异步通知的回调地址。必须为可直接访问的URL，不能带参数、session验证、csrf验证。留空则不通知 sign string(32) Y 数据签名 详见签名算法 请求返回： 字段名称 字段类型 必填参数 说明 return_code int Y 1:请求成功，0:请求失败 status int N return_code为0时有status参数为0。本参数即将舍弃，统一到return_code，请开发者看到后尽早删除 msg string(16) N return_code为0时返回的错误消息 return_msg string(16) Y 返回消息 payjs_order_id string(16) Y 平台订单号 out_trade_no string(16) Y 用户生成的订单号原样返回 total_fee int(16) Y 金额。单位：分 qrcode string(128) Y 二维码图片地址 code_url string(64) Y 可将该参数生成二维码展示出来进行扫码支付 sign string(64) Y 数据签名 详见签名算法 扫码支付演示： php python data = $data; } public function pay(){ $data = $this->data; $data['mchid'] = $this->mchid; $data['sign'] = $this->sign($data); return $this->post($data, $this->url); } public function post($data, $url) { $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS, $data); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0); $rst = curl_exec($ch); curl_close($ch); return $rst; } public function sign(array $attributes) { ksort($attributes); $sign = strtoupper(md5(urldecode(http_build_query($attributes)) . '&key=' . $this->key)); return $sign; } } $order = [ 'body' => 'test', // 订单标题 'out_trade_no' => time(), // 订单号 'total_fee' => 120, // 金额,单位:分 ]; $payjs = new Payjs($order); $rst = $payjs->pay(); print_r($rst); ?> php data = $data; } public function pay(){ $data = $this->data; $data['mchid'] = $this->mchid; $data['sign'] = $this->sign($data); return $this->post($data, $this->url); } public function post($data, $url) { $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS, $data); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0); $rst = curl_exec($ch); curl_close($ch); return $rst; } public function sign(array $attributes) { ksort($attributes); $sign = strtoupper(md5(urldecode(http_build_query($attributes)) . '&key=' . $this->key)); return $sign; } } $order = [ 'body' => 'test', // 订单标题 'out_trade_no' => time(), // 订单号 'total_fee' => 120, // 金额,单位:分 ]; $payjs = new Payjs($order); $rst = $payjs->pay(); print_r($rst); ?> python # !/usr/bin/env Python3 # -*- coding: utf-8 -*- import requests import time import hashlib from urllib.parse import urlencode,unquote ''' 扫码支付（主扫） ''' key = ' ' # 填写通信密钥 mchid = ' ' # 特写商户号 time = str(int(time.time())) order = { 'body' : 'test', # 订单标题 'out_trade_no' : time, # 订单号 'total_fee' : 120, # 金额,单位:分 'mchid' : mchid } # 构造签名函数 def sign(attributes): attributes_new = {k: attributes[k] for k in sorted(attributes.keys())} return hashlib.md5((unquote(urlencode(attributes_new))+'&key='+key).encode(encoding='utf-8')).hexdigest().upper() order['sign'] = sign(order) request_url = \"https://payjs.cn/api/native\" headers = {'content-type': 'application/x-www-form-urlencoded'} response = requests.post(request_url, data=order,headers=headers) if response: print(response.json()) "},"api-lie-biao/fu-kuan-ma-zhi-fu-ff08-bei-sao-ff09.html":{"url":"api-lie-biao/fu-kuan-ma-zhi-fu-ff08-bei-sao-ff09.html","title":"付款码支付（被扫）","keywords":"","body":"付款码支付（被扫）API 付款码支付，即原来的刷卡支付 请求步骤： 构建请求参数 POST 参数到请求地址 根据返回内容选择是否进一步查询 请求地址： $(document).ready(function() { var abc = document.domain; abc = abc.replace('www.', ''); abc = abc.replace('help.', ''); document.getElementById(\"domain\").innerHTML = 'https://' + abc }); /api/micropay 请求参数： 字段名称 字段类型 必填参数 说明 mchid string(16) Y 商户号 total_fee int(16) Y 金额。单位：分 out_trade_no string(32) Y 用户端自主生成的订单号 body string(32) N 订单标题 attach string(128) N 用户自定义数据，在notify的时候会原样返回 auth_code string(32) Y 扫码支付授权码，设备读取用户微信中的条码或者二维码信息(注：用户刷卡条形码规则：18位纯数字，以10、11、12、13、14、15开头) sign string(32) Y 数据签名 详见签名算法 请求返回： 字段名称 字段类型 必填参数 说明 return_code int Y 1:请求成功，0:请求失败 msg string(16) N return_code为0时返回的错误消息 return_msg string(16) Y 返回消息 payjs_order_id string(16) Y 平台订单号 out_trade_no string(16) Y 用户生成的订单号原样返回 total_fee int(16) Y 金额。单位：分 sign string(64) Y 数据签名 详见签名算法 注：该API正在白名单测试，有需要的同学请发工单申请 "},"api-lie-biao/shou-yin-tai-zhi-fu.html":{"url":"api-lie-biao/shou-yin-tai-zhi-fu.html","title":"收银台支付","keywords":"","body":"收银台支付接口 收银台方式同样是通过JSAPI方式发起的支付，只是简化了开发步骤和流程。适用于微信webview环境 收银台请求步骤： 构建请求参数 使用浏览器携带参数跳转至收银台地址 用户在收银台界面点击按钮发起支付 服务端接收异步通知 请求地址： $(document).ready(function() { var abc = document.domain; abc = abc.replace('www.', ''); abc = abc.replace('help.', ''); document.getElementById(\"domain\").innerHTML = 'https://' + abc }); /api/cashier 请求参数： 字段名称 字段类型 必填参数 说明 mchid string(16) Y 商户号 total_fee int(16) Y 金额。单位：分 out_trade_no string(32) Y 用户端自主生成的订单号，在用户端要保证唯一性 body string(32) N 订单标题 attach string(127) N 用户自定义数据，在notify的时候会原样返回 notify_url string(255) N 接收微信支付异步通知的回调地址。必须为可直接访问的URL，不能带参数、session验证、csrf验证。留空则不通知 callback_url string(32) N 用户支付成功后，前端跳转地址。留空则支付后关闭webview auto bool N auto=1：无需点击支付按钮，自动发起支付。默认手动点击发起支付 hide bool N hide=1：隐藏收银台背景界面。默认显示背景界面（这里hide为1时，自动忽略auto参数） sign string(32) Y 数据签名 详见签名算法 请求返回： 收银台模式下，请求直接发起收银台支付。用户支付成功后，前台收银台页面自动关闭或跳转至自定义的callback_url，后台系统会异步通知 特别提醒：支付后回调函数，并不能标示支付状态。用户需进一步完成验单逻辑 请求成功无返回。请求失败返回： 字段名称 字段类型 必填参数 说明 return_code int Y 0:提交失败 status int Y 0:失败 msg string(32) Y 失败原因 return_msg string(32) Y 失败原因，同msg "},"api-lie-biao/jsapizhi-fu.html":{"url":"api-lie-biao/jsapizhi-fu.html","title":"JSAPI支付","keywords":"","body":"JSAPI接口 JSAPI接口使用前，请在后台设置支付目录 JSAPI接口请求步骤： 参照《获取 OPENID》章节，获得 OPENID 通过该 api 构造订单参数获取 jsapi 支付参数 通过 jssdk 或 WeixinJsBridge 方式自行发起支付 服务端接收异步通知 请求地址： $(document).ready(function() { var abc = document.domain; abc = abc.replace('www.', ''); abc = abc.replace('help.', ''); document.getElementById(\"domain\").innerHTML = 'https://' + abc }); /api/jsapi 请求参数： 字段名称 字段类型 必填参数 说明 mchid string(16) Y 商户号 total_fee int(16) Y 金额。单位：分 out_trade_no string(32) Y 用户端自主生成的订单号，在用户端要保证唯一性 body string(32) N 订单标题 attach string(127) N 用户自定义数据，在notify的时候会原样返回 notify_url string(255) N 接收微信支付异步通知的回调地址。必须为可直接访问的URL，不能带参数、session验证、csrf验证。留空则不通知 openid string(32) Y 用户openid sign string(32) Y 数据签名 详见签名算法 请求返回： 字段名称 字段类型 必填参数 说明 return_code int Y 0:失败1:成功 return_msg string(32) Y 失败原因 payjs_order_id string(32) Y 订单号 jsapi string(255) N 用于发起支付的支付参数 sign string(32) Y 数据签名 "},"api-lie-biao/mweb.html":{"url":"api-lie-biao/mweb.html","title":"H5支付","keywords":"","body":"H5支付（MWEB） API 特别说明：本API以申请形式开放，需要的同学请发工单附带业务场景描述单独申请开通 H5 支付是指手机自带浏览器跳转至微信客户端支付的方式 H5 支付请求步骤： 构建请求参数 POST 参数到请求地址 根据返回的参数h5_url在前端跳转 用户支付成功后接收异步通知 请求地址： $(document).ready(function() { var abc = document.domain; abc = abc.replace('www.', ''); abc = abc.replace('help.', ''); document.getElementById(\"domain\").innerHTML = 'https://' + abc }); /api/mweb 请求参数(必选参数)： 字段名称 字段类型 必填参数 说明 mchid string(16) Y 商户号 total_fee int(16) Y 金额。单位：分 out_trade_no string(32) Y 用户端自主生成的订单号 sign string(32) Y 数据签名 详见签名算法 body string(64) N 订单标题 attach string(127) N 用户自定义数据，在notify的时候会原样返回 callback_url string(255) N 支付成功后，从微信客户端跳转回浏览器的URL。留空跳回原地址 notify_url string(255) N 接收微信支付异步通知的回调地址。必须为可直接访问的URL，不能带参数、session验证、csrf验证。留空则不通知 请求返回： 字段名称 字段类型 必填参数 说明 return_code int Y 1:请求成功，0:请求失败 return_msg string(16) Y 返回消息 payjs_order_id string(16) Y PAYJS 平台订单号 out_trade_no string(16) Y 用户生成的订单号原样返回 total_fee int(16) Y 金额。单位：分 h5_url string(64) Y 浏览器跳转到微信支付的地址（有效期5分钟） sign string(64) Y 数据签名 详见签名算法 常见问题： h5_url须以链接形式点击跳转(微信客户端须获取到浏览器referer) "},"api-lie-biao/ding-dan-cha-xun.html":{"url":"api-lie-biao/ding-dan-cha-xun.html","title":"订单查询","keywords":"","body":"订单查询接口 用户发起支付后，可通过本接口发起订单查询来确认订单状态 请求地址： $(document).ready(function() { var abc = document.domain; abc = abc.replace('www.', ''); abc = abc.replace('help.', ''); document.getElementById(\"domain\").innerHTML = 'https://' + abc }); /api/check 请求参数： 字段名称 字段类型 必填参数 说明 payjs_order_id string(32) Y 平台订单号 sign string(32) Y 数据签名 详见签名算法 请求返回： 字段名称 字段类型 必填参数 说明 return_code int Y 1:请求成功0:请求失败 mchid string(32) Y 平台商户号 out_trade_no string(32) Y 用户端订单号 payjs_order_id string(32) Y 订单号 transaction_id string(32) N 微信显示订单号 status int(1) Y 0：未支付，1：支付成功 openid string(32) N 用户OPENID total_fee int(16) N 订单金额 paid_time string(32) N 订单支付时间 attach string(127) N 用户自定义数据 sign string(32) Y 数据签名 详见签名算法 提示：请做好用户端订单号的唯一性处理。在适当时机会开放通过自身订单号查询订单详情 此接口用户订单状态的辅助查询，请勿直接使用此接口做订单状态的高频轮询，调用频率过高可能会导致IP进入黑名单 正确的业务逻辑：商户侧服务器通过接收异步通知后更新自己订单状态，用户前端轮询应放在商户侧订单状态 "},"api-lie-biao/guan-bi-ding-dan.html":{"url":"api-lie-biao/guan-bi-ding-dan.html","title":"关闭订单","keywords":"","body":"关闭订单接口 关闭订单接口只能针对30天以内的订单 关闭已经发起的订单，请求方式为POST 请求地址： $(document).ready(function() { var abc = document.domain; abc = abc.replace('www.', ''); abc = abc.replace('help.', ''); document.getElementById(\"domain\").innerHTML = 'https://' + abc }); /api/close 请求参数： 字段名称 字段类型 必填参数 说明 payjs_order_id string(32) Y 平台订单号 sign string(32) Y 数据签名 详见签名算法 请求返回： 字段名称 字段类型 必填参数 说明 return_code int Y 1:请求成功0:请求失败 return_msg string(32) Y 返回消息 payjs_order_id string(32) Y 平台订单号 sign string(32) Y 数据签名 详见签名算法 "},"api-lie-biao/che-xiao-ding-dan.html":{"url":"api-lie-biao/che-xiao-ding-dan.html","title":"撤销订单","keywords":"","body":"撤销订单接口 该接口一般用户“付款码支付”和“人脸支付”两种支付场景，其它场景可使用“关闭订单”接口 撤销订单主要是针对一些异常订单，例如无法查询或确定订单状态。 无论该订单是否被支付，发起撤销后，该订单如果被支付则自动原路退款，如果未支付则自动关闭订单 撤销订单接口只能应用于7天以内的订单 撤销已经发起的订单，请求方式为POST 请求地址： $(document).ready(function() { var abc = document.domain; abc = abc.replace('www.', ''); abc = abc.replace('help.', ''); document.getElementById(\"domain\").innerHTML = 'https://' + abc }); /api/reverse 请求参数： 字段名称 字段类型 必填参数 说明 payjs_order_id string(32) Y 平台订单号 sign string(32) Y 数据签名 详见签名算法 请求返回： 字段名称 字段类型 必填参数 说明 return_code int Y 1:请求成功0:请求失败 return_msg string(32) Y 返回消息 payjs_order_id string(32) Y 平台订单号 sign string(32) Y 数据签名 详见签名算法 "},"api-lie-biao/tui-kuan.html":{"url":"api-lie-biao/tui-kuan.html","title":"退款","keywords":"","body":"退款接口 对已经支付的订单发起退款，请求方式为POST 请求地址： $(document).ready(function() { var abc = document.domain; abc = abc.replace('www.', ''); abc = abc.replace('help.', ''); document.getElementById(\"domain\").innerHTML = 'https://' + abc }); /api/refund 请求参数： 字段名称 字段类型 必填参数 说明 payjs_order_id string(32) Y 平台订单号 sign string(32) Y 数据签名 详见签名算法 请求返回： 字段名称 字段类型 必填参数 说明 return_code int Y 1:退款成功0:退款失败 return_msg string(32) Y 返回消息 payjs_order_id string(32) N 平台订单号 out_trade_no string(32) N 用户侧订单号 transaction_id string(32) N 微信支付订单号 sign string(32) Y 数据签名 详见签名算法 提示：成功退款的条件是，未结算款大于退款金额 "},"api-lie-biao/yi-bu-tong-zhi.html":{"url":"api-lie-biao/yi-bu-tong-zhi.html","title":"异步通知","keywords":"","body":"支付成功异步通知接口 用户支付成功后，平台会发送异步通知到订单携带的notify_url（如果有该参数的话），请求方式为 POST 请求参数： 字段名称 字段类型 必填参数 说明 return_code int(1) Y 1：支付成功 total_fee int(16) Y 金额。单位：分 out_trade_no string(32) Y 用户端自主生成的订单号 payjs_order_id string(32) Y 订单号 transaction_id string(32) Y 微信用户手机显示订单号 time_end string(32) Y 支付成功时间 openid string(32) Y 用户OPENID标示，本参数没有实际意义，旨在方便用户端区分不同用户 attach string(127) N 用户自定义数据 mchid string(16) Y 商户号 sign string(32) Y 数据签名 详见签名算法 提示： 接收通知的服务器请在3秒钟内响应（http状态码200则标记通知成功，其它状态码则标记通知失败，推送结束） 为保障推送到达率，系统可能多次进行通知推送，请做好去重逻辑 推送可能增加参数，请做好冗余处理，勿使用 hard code 商户系统对于支付结果通知的内容一定要验签，并校验返回的订单金额是否与商户侧的订单金额一致 通知频率（秒）：0，15，30，180，1800，3600。超过1小时后如需推送，可以在后台手动补发 特别提醒：接收异步通知的服务器需在大陆境内备案服务器 接收回调流程示例： $data = $_POST; if($data['return_code'] == 1){ // 1.验签逻辑 // 2.验重逻辑 // 3.自身业务逻辑 // 4.返回 success 字符串（http状态码为200） echo 'success'; } "},"api-lie-biao/huo-qu-openid.html":{"url":"api-lie-biao/huo-qu-openid.html","title":"获取 OPENID","keywords":"","body":"获取用户OPENID 无需关注具体获取过程，系统自动处理 请求方式：浏览器跳转 请求地址： $(document).ready(function() { var abc = document.domain; abc = abc.replace('www.', ''); abc = abc.replace('help.', ''); document.getElementById(\"domain\").innerHTML = 'https://' + abc }); /api/openid 请求参数： 字段名称 字段类型 必填参数 说明 mchid string(32) Y 商户号 callback_url string(32) Y 接收openid的url。必须为可直接访问的url，不能带session验证、csrf验证 注意：该接口不能在小程序中直接使用；不能在微信开发者工具里调试，需真机调试 提示：该openid具备唯一性，可做映射关系存储在本地数据库 请求示例： 假如需要接收openid的url是： http://www.example.com/abc?uid=32 则直接通过浏览器跳转该url即可： $(document).ready(function() { var abc = document.domain; abc = abc.replace('www.', ''); abc = abc.replace('help.', ''); document.getElementById(\"domain2\").innerHTML = 'https://' + abc }); /api/openid?mchid=1234567890&callback_url=http://www.example.com/abc?uid=32 完成openid获取后，微信浏览器会自动跳转至： http://www.example.com/abc?uid=32&openid=************* "},"api-lie-biao/shang-hu-zi-liao.html":{"url":"api-lie-biao/shang-hu-zi-liao.html","title":"商户资料","keywords":"","body":"获取商户资料 根据商户号查询收款用户的身份信息、豆豆数量 请求地址： $(document).ready(function() { var abc = document.domain; abc = abc.replace('www.', ''); abc = abc.replace('help.', ''); document.getElementById(\"domain\").innerHTML = 'https://' + abc }); /api/info 请求参数： 字段名称 字段类型 必填参数 说明 mchid string(32) Y 商户号 sign string(32) Y 数据签名 详见签名算法 请求返回： 字段名称 字段类型 必填参数 说明 return_code int Y 1:请求成功0:请求失败 return_msg string(32) Y 返回消息 doudou int Y 用户豆豆数 name string(32) Y 商户名称 jsapi_path string(32) Y JSAPI支付目录 phone string(32) Y 联系电话 sign string(32) Y 数据签名 详见签名算法 该接口字段可能会变化，请勿使用hardcode 该接口请求频率为6次/分 "},"api-lie-biao/tou-su-cha-xun.html":{"url":"api-lie-biao/tou-su-cha-xun.html","title":"投诉查询","keywords":"","body":"获取投诉 根据商户号，获取商户被投诉的订单 请求地址： $(document).ready(function() { var abc = document.domain; abc = abc.replace('www.', ''); abc = abc.replace('help.', ''); document.getElementById(\"domain\").innerHTML = 'https://' + abc }); /api/complaint 请求参数： 字段名称 字段类型 必填参数 说明 mchid string(32) Y 商户号 sign string(32) Y 数据签名 详见签名算法 请求返回： 字段名称 字段类型 必填参数 说明 return_code int Y 1:请求成功 0:请求失败 return_msg string(32) Y 返回消息 complaints string(255) Y 投诉详情 sign string(32) Y 数据签名 详见签名算法 其中 complaint 参数存在时的格式为： 字段名称 字段类型 必填参数 说明 complaint_at string(32) Y 投诉日期 out_trade_no string(32) Y 商户侧订单号 order_id string(32) Y 平台订单号 total_fee int Y 订单金额（分） body string(255) Y 投诉内容（可能为空） phone string(32) Y 用户联系电话 该接口字段可能会变化，请勿使用 hardcode 本接口有频率限制，建议每4个小时请求一次 "},"api-lie-biao/yin-xing-bian-ma-cha-xun.html":{"url":"api-lie-biao/yin-xing-bian-ma-cha-xun.html","title":"银行编码查询","keywords":"","body":"银行编码对应名称查询 根据银行简称查询银行详细名称。银行数据库会随时更新 请求地址： $(document).ready(function() { var abc = document.domain; abc = abc.replace('www.', ''); abc = abc.replace('help.', ''); document.getElementById(\"domain\").innerHTML = 'https://' + abc }); /api/bank 请求参数： 字段名称 字段类型 必填参数 说明 mchid string(32) Y 商户号 bank string(32) Y 银行简写 sign string(32) Y 数据签名 详见签名算法 请求返回： 字段名称 字段类型 必填参数 说明 return_code int Y 1:请求成功0:请求失败 return_msg string(32) Y 返回消息 bank string(32) Y 银行名称 sign string(32) Y 数据签名 详见签名算法 未查询到银行名称则返回\"notfound\" 该接口请求频率为50次/分 "},"api-lie-biao/qian-ming-suan-fa.html":{"url":"api-lie-biao/qian-ming-suan-fa.html","title":"签名算法","keywords":"","body":"签名算法 签名生成的通用步骤如下： 设所有发送或者接收到的数据为集合M，将集合M内非空参数值的参数按照参数名ASCII码从小到大排序（字典序），使用URL键值对的格式（即key1=value1&key2=value2…）拼接成字符串stringA。 在stringA最后拼接上 &key=密钥 得到stringSignTemp字符串，并对stringSignTemp进行MD5运算，再将得到的字符串所有字符转换为大写，得到sign值 特别注意以下重要规则： 参数名ASCII码从小到大排序（字典序）； 如果参数的值为空不参与签名； 参数名区分大小写； 验证调用返回或微信主动通知签名时，传送的sign参数不参与签名，将生成的签名与该sign值作校验。 接口可能增加字段，验证签名时必须支持增加的扩展字段 举例 例如传递的参数如下： mchid: 12345 total_fee: 1 out_trade_no: 123123123123 第一步：对参数按照key=value的格式，并按照参数名ASCII字典序排序如下 mchid=12345&out_trade_no=123123123123&total_fee=1 第二步：对上一步中的字符串拼接 &key=密钥 mchid=12345&out_trade_no=123123123123&total_fee=1&key=xxxxxxxxx 第三步：对上一步中字符串取MD5值 $sign = md5('mchid=12345&out_trade_no=123123123123&total_fee=1&key=xxxxxxxxx'); 第四步：对上面md5值转化为大写 $sign = strtoupper($sign); PHP代码示例 // 签名方法 function sign(array $data, $key) { ksort($data); $sign = strtoupper(md5(urldecode(http_build_query($data)).'&key='.$key)); return $sign; } // 用法示例 $data = [ 'mchid' => '12345', 'total_fee' => 1, 'out_trade_no' => '123123123123', ]; // 平台通信密钥 $key = 'xxxxxxxxxxx'; $sign = sign($data, $key); "}}